VERILOG_SOURCES = $(PWD)/../design/comparator.sv
TOPLEVEL=comparator
MODULE=comparator_test
SIM=modelsim
TOPLEVEL_LANG=verilog
include $(shell cocotb-config --makefiles)/Makefile.inc




SIM_BUILD ?= sim_build
export SIM_BUILD

###############################################################################
# Copyright (c) 2013, 2018 Potential Ventures Ltd
# Copyright (c) 2013 SolarFlare Communications Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Potential Ventures Ltd,
#       SolarFlare Communications Inc nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL POTENTIAL VENTURES LTD BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################

CMD_BIN := vsim

ifdef MODELSIM_BIN_DIR
    CMD := $(shell :; command -v $(MODELSIM_BIN_DIR)/$(CMD_BIN) 2>/dev/null)
else
    # auto-detect bin dir from system path
    CMD := $(shell :; command -v $(CMD_BIN) 2>/dev/null)
endif

ifeq (, $(CMD))
    $(error "Unable to locate command >$(CMD_BIN)<")
else
	MODELSIM_BIN_DIR := $(shell dirname $(CMD))
    export MODELSIM_BIN_DIR
endif

RTL_LIBRARY ?= work

TOPLEVEL := "$(RTL_LIBRARY).$(TOPLEVEL)"

ifndef VLOG_ARGS
VLOG_ARGS = -timescale 1ns/100ps -mfcu +acc=rmb
endif
ifdef VERILOG_INCLUDE_DIRS
VLOG_ARGS += +incdir+$(VERILOG_INCLUDE_DIRS)
endif

# below allows for maintaining legacy syntax as well as enables using cross-simulator vars COMPILE_ARGS/SIM_ARGS
VLOG_ARGS += $(COMPILE_ARGS)
VCOM_ARGS += $(COMPILE_ARGS)
VSIM_ARGS += $(SIM_ARGS)

ifeq ($(GUI),1)
CMD += -gui
VSIM_ARGS += -onfinish stop
else
CMD += -c
VSIM_ARGS += -onfinish exit
endif

GPI_EXTRA:=
ifeq ($(TOPLEVEL_LANG),vhdl)
    VSIM_ARGS += -foreign \"cocotb_init libfli.$(LIB_EXT)\"
ifneq ($(VERILOG_SOURCES),)
    GPI_EXTRA = vpi
endif

else ifeq ($(TOPLEVEL_LANG),verilog)
    VSIM_ARGS += -pli libvpi.$(LIB_EXT)
ifneq ($(VHDL_SOURCES),)
    GPI_EXTRA = fli
endif

else
   $(error "A valid value (verilog or vhdl) was not provided for TOPLEVEL_LANG=$(TOPLEVEL_LANG)")
endif

$(SIM_BUILD)/runsim.do : $(VHDL_SOURCES) $(VERILOG_SOURCES) $(CUSTOM_SIM_DEPS) $(SIM_BUILD)
	@echo "# Autogenerated file" > $@
	@echo "onerror {" >> $@
	@echo "	quit -f -code 1" >> $@
	@echo "}" >> $@
	@echo "if [file exists $(RTL_LIBRARY)] {vdel -lib $(RTL_LIBRARY) -all}" >> $@
	@echo "vlib $(RTL_LIBRARY)" >> $@
	@echo "vmap -c" >> $@
	@echo "vmap $(RTL_LIBRARY) $(RTL_LIBRARY)" >> $@
ifneq ($(VHDL_SOURCES),)
	@echo "vcom -work $(RTL_LIBRARY) $(VCOM_ARGS) $(VHDL_SOURCES)" >> $@
endif
ifneq ($(VERILOG_SOURCES),)
	@echo "vlog -work $(RTL_LIBRARY) +define+COCOTB_SIM -sv $(VLOG_ARGS) $(EXTRA_ARGS) $(VERILOG_SOURCES)" >> $@
endif
ifdef SCRIPT_FILE
	@echo "do $(SCRIPT_FILE)" >> $@
endif
	@echo "vsim $(VSIM_ARGS) $(EXTRA_ARGS) $(TOPLEVEL)" >> $@
ifeq ($(WAVES),1)
	@echo "log -recursive /*" >> $@
endif
ifeq ($(GUI),1)
	@echo "add log -r *" >> $@
else
	@echo "onbreak resume" >> $@
	@echo "run -all" >> $@
	@echo "quit" >> $@
endif

ifeq ($(OS),Msys)

# Windows allows the situation where the libstc++ used at link time as
# specified by -L can be different to the one that is used at runtime which
# comes from the first libstdc++ that it finds in the path. As such
# we use the mingw lib used at build time and put this at the start of the path
# before running

MINGW_BIN_DIR = $(shell dirname $(shell :; command -v gcc))

EXTRA_LIBS := -lmtipli
EXTRA_LIBDIRS := -L$(MODELSIM_BIN_DIR)
OLD_PATH := $(shell echo "$(PATH)" | sed 's/(/\\(/g' | sed 's/)/\\)/g' | sed 's/ /\\ /g')

LIB_LOAD := PATH=$(MINGW_BIN_DIR):$(OLD_PATH):$(LIB_DIR)
NEW_PYTHONPATH := $(shell echo "$(PYTHONPATH)" | sed -e 's/\\/\//g' -e 's/\([a-zA-Z]\):\//\/\1\//g' -e 's/;/:/g')
else
LIB_LOAD = LD_LIBRARY_PATH=$(LIB_DIR):$(LD_LIBRARY_PATH)
NEW_PYTHONPATH := $(PYTHONPATH)
endif

INT_LIBS := $(COCOTB_VPI_LIB) $(COCOTB_FLI_LIB)

ifneq ($(ARCH),i686)
CMD += -64
endif

# Depending on the version of modelsim the interfaces that it supports can change
# Append or remove values to INT_LIBS depenending on your license
$(COCOTB_RESULTS_FILE): $(SIM_BUILD)/runsim.do $(COCOTB_LIBS) $(INT_LIBS)
	set -o pipefail; cd $(SIM_BUILD) && $(LIB_LOAD) MODULE=$(MODULE) TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) COCOTB_SIM=1 \
	GPI_EXTRA=$(GPI_EXTRA) TOPLEVEL_LANG=$(TOPLEVEL_LANG) PYTHONPATH=$(LIB_DIR):$(PWD):$(NEW_PYTHONPATH) \
	$(CMD) $(PLUSARGS) -do runsim.do 2>&1 | tee sim.log
# Potential fix for buffered stdout, YMMV
	STDOUT=$(SIM_BUILD)/sim.log stdbuf --output=0 $(CMD) -do runsim.do 2>&1 && stdbuf --output=0 --input=0 tail -f sim.log && exit $${PIPESTATUS[0]}

clean::
	-rm -rf $(SIM_BUILD)



###############################################################################
# Copyright (c) 2013, 2018 Potential Ventures Ltd
# Copyright (c) 2013 SolarFlare Communications Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Potential Ventures Ltd,
#       SolarFlare Communications Inc nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL POTENTIAL VENTURES LTD BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################

# This is a simple wrapper Makefile to pull in the appropriate Makefile for
# the desired simulator and set up common paths for the sims to use to build with

all: sim

# Default to Icarus if no simulator is defined
SIM ?= icarus

COCOTB_RESULTS_FILE ?= results.xml

# Maintain backwards compatibility by supporting upper and lower case SIM variable
SIM_LOWERCASE := $(shell echo $(SIM) | tr A-Z a-z)

HAVE_SIMULATOR = $(shell if [ -f $(COCOTB_SHARE_DIR)/makefiles/simulators/Makefile.$(SIM_LOWERCASE) ]; then echo 1; else echo 0; fi;)
AVAILABLE_SIMULATORS = $(patsubst .%,%,$(suffix $(wildcard $(COCOTB_SHARE_DIR)/makefiles/simulators/Makefile.*)))

ifeq ($(HAVE_SIMULATOR),0)
$(error "Couldn't find makefile for simulator: "$(SIM_LOWERCASE)"! Available simulators: $(AVAILABLE_SIMULATORS)")
endif

# Depend on all Python from the cocotb package. This triggers a
# recompilation of the simulation if cocotb is updated.
CUSTOM_SIM_DEPS += $(shell find $(COCOTB_PY_DIR)/cocotb/ -name "*.py")

include $(COCOTB_SHARE_DIR)/lib/Makefile




# Append directory containing the cocotb Python package to PYTHONPATH
# XXX: This is only needed if cocotb is not installed into the default
# Python search path.
PYTHONPATH := $(COCOTB_PY_DIR):$(PYTHONPATH)
export PYTHONPATH

$(SIM_BUILD):
	mkdir -p $@

# Regression rule uses Make dependencies to determine whether to run the simulation
.PHONY: regression
regression: $(COCOTB_RESULTS_FILE)

# Default sim rule will force a re-run of the simulation (though the cocotb library
# and RTL compilation phases are still evaluated by makefile dependencies)
.PHONY: sim
sim:
	-@rm -f $(COCOTB_RESULTS_FILE)
	$(MAKE) $(COCOTB_RESULTS_FILE)

